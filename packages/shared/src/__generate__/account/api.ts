/* tslint:disable */
/* eslint-disable */
/**
 * BBOK Swagger API
 * DND 9th 10조의 Swagger docs 입니다.
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "./base";

/**
 *
 * @export
 * @interface DataResponseLoginResponse
 */
export interface DataResponseLoginResponse {
  /**
   *
   * @type {LoginResponse}
   * @memberof DataResponseLoginResponse
   */
  data?: LoginResponse;
  /**
   * 응답 메시지
   * @type {string}
   * @memberof DataResponseLoginResponse
   */
  message?: string;
  /**
   * 응답 코드
   * @type {number}
   * @memberof DataResponseLoginResponse
   */
  status?: number;
}
/**
 *
 * @export
 * @interface DataResponseReIssueToken
 */
export interface DataResponseReIssueToken {
  /**
   *
   * @type {ReIssueToken}
   * @memberof DataResponseReIssueToken
   */
  data?: ReIssueToken;
  /**
   * 응답 메시지
   * @type {string}
   * @memberof DataResponseReIssueToken
   */
  message?: string;
  /**
   * 응답 코드
   * @type {number}
   * @memberof DataResponseReIssueToken
   */
  status?: number;
}
/**
 *
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
  /**
   * 발급된 액세스 토큰
   * @type {string}
   * @memberof LoginResponse
   */
  accessToken?: string;
  /**
   * 멤버의 id
   * @type {string}
   * @memberof LoginResponse
   */
  memberId?: string;
  /**
   * 발급된 리프레쉬 토큰
   * @type {string}
   * @memberof LoginResponse
   */
  refreshToken?: string;
}
/**
 *
 * @export
 * @interface ReIssueToken
 */
export interface ReIssueToken {
  /**
   *
   * @type {string}
   * @memberof ReIssueToken
   */
  accessToken?: string;
  /**
   *
   * @type {string}
   * @memberof ReIssueToken
   */
  refreshToken?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 해당 url을 통해 로그인 화면으로 넘어간 후, 사용자가 정보를 입력하면 redirect url에서 코드를 발급할 수 있습니다.
     * @summary 인가 코드 발급
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKakaoAuthCodeUsingGET: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/kakao/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 요청 보내면 바로 게스트가 생성되고, accessToken이 발급됩니다.
     * @summary 게스트 회원가입
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    guestSignupUsingPOST: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/guest/signup`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 인가 코드를 입력하고 요청보내면, 사용자의 정보를 저장한 후 사용자의 Id를 확인할 수 있습니다.
     * @summary 카카오 계정 회원가입
     * @param {string} code code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    kakaoLoginUsingGET: async (
      code: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'code' is not null or undefined
      assertParamExists("kakaoLoginUsingGET", "code", code);
      const localVarPath = `/api/v1/account/kakao/result`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (code !== undefined) {
        localVarQueryParameter["code"] = code;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Jwt를 재발급 할 수 있습니다.
     * @summary Jwt 재발급
     * @param {string} refreshToken refreshToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reIssueTokenUsingGET: async (
      refreshToken: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'refreshToken' is not null or undefined
      assertParamExists("reIssueTokenUsingGET", "refreshToken", refreshToken);
      const localVarPath = `/api/v1/jwt/refresh`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (refreshToken !== undefined) {
        localVarQueryParameter["refreshToken"] = refreshToken;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     * 해당 url을 통해 로그인 화면으로 넘어간 후, 사용자가 정보를 입력하면 redirect url에서 코드를 발급할 수 있습니다.
     * @summary 인가 코드 발급
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getKakaoAuthCodeUsingGET(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<{ [key: string]: Array<string> }>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getKakaoAuthCodeUsingGET(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 요청 보내면 바로 게스트가 생성되고, accessToken이 발급됩니다.
     * @summary 게스트 회원가입
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async guestSignupUsingPOST(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DataResponseLoginResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.guestSignupUsingPOST(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 인가 코드를 입력하고 요청보내면, 사용자의 정보를 저장한 후 사용자의 Id를 확인할 수 있습니다.
     * @summary 카카오 계정 회원가입
     * @param {string} code code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async kakaoLoginUsingGET(
      code: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DataResponseLoginResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.kakaoLoginUsingGET(code, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Jwt를 재발급 할 수 있습니다.
     * @summary Jwt 재발급
     * @param {string} refreshToken refreshToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async reIssueTokenUsingGET(
      refreshToken: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DataResponseReIssueToken>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.reIssueTokenUsingGET(
          refreshToken,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     * 해당 url을 통해 로그인 화면으로 넘어간 후, 사용자가 정보를 입력하면 redirect url에서 코드를 발급할 수 있습니다.
     * @summary 인가 코드 발급
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKakaoAuthCodeUsingGET(
      options?: any
    ): AxiosPromise<{ [key: string]: Array<string> }> {
      return localVarFp
        .getKakaoAuthCodeUsingGET(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 요청 보내면 바로 게스트가 생성되고, accessToken이 발급됩니다.
     * @summary 게스트 회원가입
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    guestSignupUsingPOST(
      options?: any
    ): AxiosPromise<DataResponseLoginResponse> {
      return localVarFp
        .guestSignupUsingPOST(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 인가 코드를 입력하고 요청보내면, 사용자의 정보를 저장한 후 사용자의 Id를 확인할 수 있습니다.
     * @summary 카카오 계정 회원가입
     * @param {string} code code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    kakaoLoginUsingGET(
      code: string,
      options?: any
    ): AxiosPromise<DataResponseLoginResponse> {
      return localVarFp
        .kakaoLoginUsingGET(code, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Jwt를 재발급 할 수 있습니다.
     * @summary Jwt 재발급
     * @param {string} refreshToken refreshToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reIssueTokenUsingGET(
      refreshToken: string,
      options?: any
    ): AxiosPromise<DataResponseReIssueToken> {
      return localVarFp
        .reIssueTokenUsingGET(refreshToken, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   * 해당 url을 통해 로그인 화면으로 넘어간 후, 사용자가 정보를 입력하면 redirect url에서 코드를 발급할 수 있습니다.
   * @summary 인가 코드 발급
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getKakaoAuthCodeUsingGET(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getKakaoAuthCodeUsingGET(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 요청 보내면 바로 게스트가 생성되고, accessToken이 발급됩니다.
   * @summary 게스트 회원가입
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public guestSignupUsingPOST(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .guestSignupUsingPOST(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 인가 코드를 입력하고 요청보내면, 사용자의 정보를 저장한 후 사용자의 Id를 확인할 수 있습니다.
   * @summary 카카오 계정 회원가입
   * @param {string} code code
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public kakaoLoginUsingGET(code: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .kakaoLoginUsingGET(code, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Jwt를 재발급 할 수 있습니다.
   * @summary Jwt 재발급
   * @param {string} refreshToken refreshToken
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public reIssueTokenUsingGET(
    refreshToken: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .reIssueTokenUsingGET(refreshToken, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
