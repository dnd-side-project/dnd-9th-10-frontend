/* tslint:disable */
/* eslint-disable */
/**
 * BBOK Swagger API
 * DND 9th 10조의 Swagger docs 입니다.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BasicChecklistDto
 */
export interface BasicChecklistDto {
    /**
     * 기본 이상적인 체크리스트
     * @type {Array<string>}
     * @memberof BasicChecklistDto
     */
    'badChecklist'?: Array<string>;
    /**
     * 기본 이상적인 체크리스트
     * @type {Array<string>}
     * @memberof BasicChecklistDto
     */
    'goodChecklist'?: Array<string>;
}
/**
 * 
 * @export
 * @interface BbokCharacterDto
 */
export interface BbokCharacterDto {
    /**
     * 캐릭터 아이콘 Url
     * @type {string}
     * @memberof BbokCharacterDto
     */
    'iconUrl'?: string;
    /**
     * 캐릭터 이름(인장이, 고스미)
     * @type {string}
     * @memberof BbokCharacterDto
     */
    'name'?: string;
    /**
     * 캐릭터 타입(CACTUS, HEDGEHOG)
     * @type {string}
     * @memberof BbokCharacterDto
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface BbokCharactersDto
 */
export interface BbokCharactersDto {
    /**
     * 캐릭터 목록
     * @type {Array<BbokCharacterDto>}
     * @memberof BbokCharactersDto
     */
    'characters'?: Array<BbokCharacterDto>;
}
/**
 * 
 * @export
 * @interface ChecklistDto
 */
export interface ChecklistDto {
    /**
     * 
     * @type {number}
     * @memberof ChecklistDto
     */
    'id'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ChecklistDto
     */
    'isChecked'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChecklistDto
     */
    'isGood'?: boolean;
}
/**
 * 
 * @export
 * @interface DataResponseBasicChecklistDto
 */
export interface DataResponseBasicChecklistDto {
    /**
     * 
     * @type {BasicChecklistDto}
     * @memberof DataResponseBasicChecklistDto
     */
    'data'?: BasicChecklistDto;
    /**
     * 응답 메시지
     * @type {string}
     * @memberof DataResponseBasicChecklistDto
     */
    'message'?: string;
    /**
     * 응답 코드
     * @type {number}
     * @memberof DataResponseBasicChecklistDto
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface DataResponseBbokCharactersDto
 */
export interface DataResponseBbokCharactersDto {
    /**
     * 
     * @type {BbokCharactersDto}
     * @memberof DataResponseBbokCharactersDto
     */
    'data'?: BbokCharactersDto;
    /**
     * 응답 메시지
     * @type {string}
     * @memberof DataResponseBbokCharactersDto
     */
    'message'?: string;
    /**
     * 응답 코드
     * @type {number}
     * @memberof DataResponseBbokCharactersDto
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface DataResponseDiaryCreateDto
 */
export interface DataResponseDiaryCreateDto {
    /**
     * 
     * @type {DiaryCreateDto}
     * @memberof DataResponseDiaryCreateDto
     */
    'data'?: DiaryCreateDto;
    /**
     * 응답 메시지
     * @type {string}
     * @memberof DataResponseDiaryCreateDto
     */
    'message'?: string;
    /**
     * 응답 코드
     * @type {number}
     * @memberof DataResponseDiaryCreateDto
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface DataResponseMemberInfoResponseDto
 */
export interface DataResponseMemberInfoResponseDto {
    /**
     * 
     * @type {MemberInfoResponseDto}
     * @memberof DataResponseMemberInfoResponseDto
     */
    'data'?: MemberInfoResponseDto;
    /**
     * 응답 메시지
     * @type {string}
     * @memberof DataResponseMemberInfoResponseDto
     */
    'message'?: string;
    /**
     * 응답 코드
     * @type {number}
     * @memberof DataResponseMemberInfoResponseDto
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface DiaryCreateDto
 */
export interface DiaryCreateDto {
    /**
     * 친구 적합도
     * @type {number}
     * @memberof DiaryCreateDto
     */
    'friendPercentage'?: number;
    /**
     * 
     * @type {DiarySayingDto}
     * @memberof DiaryCreateDto
     */
    'saying'?: DiarySayingDto;
}
/**
 * 
 * @export
 * @interface DiaryRequestDto
 */
export interface DiaryRequestDto {
    /**
     * 체크한 적합 체크리스트 id 배열
     * @type {Array<ChecklistDto>}
     * @memberof DiaryRequestDto
     */
    'checklist'?: Array<ChecklistDto>;
    /**
     * 일기 내용
     * @type {string}
     * @memberof DiaryRequestDto
     */
    'content'?: string;
    /**
     * 일기 날짜
     * @type {string}
     * @memberof DiaryRequestDto
     */
    'date'?: string;
    /**
     * 사용한 이모지
     * @type {string}
     * @memberof DiaryRequestDto
     */
    'emoji'?: DiaryRequestDtoEmojiEnum;
    /**
     * 태그 목록
     * @type {Array<string>}
     * @memberof DiaryRequestDto
     */
    'tags'?: Array<string>;
}

export const DiaryRequestDtoEmojiEnum = {
    Angry: 'ANGRY',
    Calm: 'CALM',
    Displeased: 'DISPLEASED',
    Happy: 'HAPPY',
    Panic: 'PANIC',
    Sad: 'SAD'
} as const;

export type DiaryRequestDtoEmojiEnum = typeof DiaryRequestDtoEmojiEnum[keyof typeof DiaryRequestDtoEmojiEnum];

/**
 * 
 * @export
 * @interface DiarySayingDto
 */
export interface DiarySayingDto {
    /**
     * 명언 내용
     * @type {string}
     * @memberof DiarySayingDto
     */
    'contents'?: string;
    /**
     * 명언 Id
     * @type {number}
     * @memberof DiarySayingDto
     */
    'id'?: number;
    /**
     * 북마크 되어있는지 여부
     * @type {boolean}
     * @memberof DiarySayingDto
     */
    'isMarked'?: boolean;
    /**
     * 명언 출처
     * @type {string}
     * @memberof DiarySayingDto
     */
    'reference'?: string;
}
/**
 * 
 * @export
 * @interface FriendRequestDto
 */
export interface FriendRequestDto {
    /**
     * 친구 캐릭터
     * @type {string}
     * @memberof FriendRequestDto
     */
    'character'?: string;
    /**
     * 친구 이름
     * @type {string}
     * @memberof FriendRequestDto
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface MemberChecklistRequestDto
 */
export interface MemberChecklistRequestDto {
    /**
     * 사용자 정의 기피하는 기준 리스트
     * @type {Array<string>}
     * @memberof MemberChecklistRequestDto
     */
    'badChecklist'?: Array<string>;
    /**
     * 사용자 정의 이상적인 기준 리스트
     * @type {Array<string>}
     * @memberof MemberChecklistRequestDto
     */
    'goodChecklist'?: Array<string>;
}
/**
 * 
 * @export
 * @interface MemberInfoResponseDto
 */
export interface MemberInfoResponseDto {
    /**
     * member의 고유 Id
     * @type {string}
     * @memberof MemberInfoResponseDto
     */
    'memberId'?: string;
    /**
     * member의 이름
     * @type {string}
     * @memberof MemberInfoResponseDto
     */
    'memberName'?: string;
    /**
     * member의 oauth 제공자(GUEST, KAKAO)
     * @type {string}
     * @memberof MemberInfoResponseDto
     */
    'oauth2Provider'?: MemberInfoResponseDtoOauth2ProviderEnum;
    /**
     * member의 프로필 이미지 url
     * @type {string}
     * @memberof MemberInfoResponseDto
     */
    'profileUrl'?: string;
}

export const MemberInfoResponseDtoOauth2ProviderEnum = {
    Guest: 'GUEST',
    Kakao: 'KAKAO'
} as const;

export type MemberInfoResponseDtoOauth2ProviderEnum = typeof MemberInfoResponseDtoOauth2ProviderEnum[keyof typeof MemberInfoResponseDtoOauth2ProviderEnum];

/**
 * 
 * @export
 * @interface MessageResponse
 */
export interface MessageResponse {
    /**
     * 응답 메시지
     * @type {string}
     * @memberof MessageResponse
     */
    'message'?: string;
    /**
     * 응답 코드
     * @type {number}
     * @memberof MessageResponse
     */
    'status'?: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 사용자 정의 체크리스트 추가
         * @param {MemberChecklistRequestDto} [memberChecklistRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChecklistUsingPOST: async (memberChecklistRequestDto?: MemberChecklistRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/checklist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberChecklistRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 일기 등록
         * @param {number} id 친구 id
         * @param {DiaryRequestDto} [diaryRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDiaryUsingPOST: async (id: number, diaryRequestDto?: DiaryRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createDiaryUsingPOST', 'id', id)
            const localVarPath = `/api/v1/friend/{id}/diary`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(diaryRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 친구 등록
         * @param {FriendRequestDto} [friendRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFriendUsingPOST: async (friendRequestDto?: FriendRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/friend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(friendRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 기본 체크리스트 제공
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicChecklistUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/checklist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 캐릭터 정보 제공
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBbokCharacterUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/character`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 마이 페이지에서 사용자의 정보를 볼 수 있습니다.
         * @summary 내 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/member`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 사용자 정의 체크리스트 추가
         * @param {MemberChecklistRequestDto} [memberChecklistRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createChecklistUsingPOST(memberChecklistRequestDto?: MemberChecklistRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createChecklistUsingPOST(memberChecklistRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 일기 등록
         * @param {number} id 친구 id
         * @param {DiaryRequestDto} [diaryRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDiaryUsingPOST(id: number, diaryRequestDto?: DiaryRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataResponseDiaryCreateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDiaryUsingPOST(id, diaryRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 친구 등록
         * @param {FriendRequestDto} [friendRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFriendUsingPOST(friendRequestDto?: FriendRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFriendUsingPOST(friendRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 기본 체크리스트 제공
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBasicChecklistUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataResponseBasicChecklistDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBasicChecklistUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 캐릭터 정보 제공
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBbokCharacterUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataResponseBbokCharactersDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBbokCharacterUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 마이 페이지에서 사용자의 정보를 볼 수 있습니다.
         * @summary 내 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMemberUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataResponseMemberInfoResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMemberUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary 사용자 정의 체크리스트 추가
         * @param {MemberChecklistRequestDto} [memberChecklistRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChecklistUsingPOST(memberChecklistRequestDto?: MemberChecklistRequestDto, options?: any): AxiosPromise<MessageResponse> {
            return localVarFp.createChecklistUsingPOST(memberChecklistRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 일기 등록
         * @param {number} id 친구 id
         * @param {DiaryRequestDto} [diaryRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDiaryUsingPOST(id: number, diaryRequestDto?: DiaryRequestDto, options?: any): AxiosPromise<DataResponseDiaryCreateDto> {
            return localVarFp.createDiaryUsingPOST(id, diaryRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 친구 등록
         * @param {FriendRequestDto} [friendRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFriendUsingPOST(friendRequestDto?: FriendRequestDto, options?: any): AxiosPromise<MessageResponse> {
            return localVarFp.createFriendUsingPOST(friendRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 기본 체크리스트 제공
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicChecklistUsingGET(options?: any): AxiosPromise<DataResponseBasicChecklistDto> {
            return localVarFp.getBasicChecklistUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 캐릭터 정보 제공
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBbokCharacterUsingGET(options?: any): AxiosPromise<DataResponseBbokCharactersDto> {
            return localVarFp.getBbokCharacterUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 마이 페이지에서 사용자의 정보를 볼 수 있습니다.
         * @summary 내 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberUsingGET(options?: any): AxiosPromise<DataResponseMemberInfoResponseDto> {
            return localVarFp.getMemberUsingGET(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary 사용자 정의 체크리스트 추가
     * @param {MemberChecklistRequestDto} [memberChecklistRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createChecklistUsingPOST(memberChecklistRequestDto?: MemberChecklistRequestDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createChecklistUsingPOST(memberChecklistRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 일기 등록
     * @param {number} id 친구 id
     * @param {DiaryRequestDto} [diaryRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createDiaryUsingPOST(id: number, diaryRequestDto?: DiaryRequestDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createDiaryUsingPOST(id, diaryRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 친구 등록
     * @param {FriendRequestDto} [friendRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createFriendUsingPOST(friendRequestDto?: FriendRequestDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createFriendUsingPOST(friendRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 기본 체크리스트 제공
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBasicChecklistUsingGET(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBasicChecklistUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 캐릭터 정보 제공
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBbokCharacterUsingGET(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBbokCharacterUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 마이 페이지에서 사용자의 정보를 볼 수 있습니다.
     * @summary 내 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMemberUsingGET(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMemberUsingGET(options).then((request) => request(this.axios, this.basePath));
    }
}


