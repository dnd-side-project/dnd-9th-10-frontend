/* tslint:disable */
/* eslint-disable */
/**
 * BBOK Swagger API
 * DND 9th 10조의 Swagger docs 입니다.
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "./base";

/**
 *
 * @export
 * @interface BbokCharacterDto
 */
export interface BbokCharacterDto {
  /**
   * 캐릭터 아이콘 Url
   * @type {string}
   * @memberof BbokCharacterDto
   */
  iconUrl?: string;
  /**
   * 캐릭터 이름(인장이, 고스미)
   * @type {string}
   * @memberof BbokCharacterDto
   */
  name?: string;
  /**
   * 캐릭터 타입(CACTUS, HEDGEHOG)
   * @type {string}
   * @memberof BbokCharacterDto
   */
  type?: string;
}
/**
 *
 * @export
 * @interface BbokCharactersDto
 */
export interface BbokCharactersDto {
  /**
   * 캐릭터 목록
   * @type {Array<BbokCharacterDto>}
   * @memberof BbokCharactersDto
   */
  characters?: Array<BbokCharacterDto>;
}
/**
 *
 * @export
 * @interface Checklist
 */
export interface Checklist {
  /**
   *
   * @type {number}
   * @memberof Checklist
   */
  id?: number;
  /**
   *
   * @type {boolean}
   * @memberof Checklist
   */
  isChecked?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Checklist
   */
  isGood?: boolean;
}
/**
 *
 * @export
 * @interface ChecklistInfo
 */
export interface ChecklistInfo {
  /**
   *
   * @type {string}
   * @memberof ChecklistInfo
   */
  criteria?: string;
  /**
   *
   * @type {number}
   * @memberof ChecklistInfo
   */
  id?: number;
}
/**
 *
 * @export
 * @interface CreateDiaryRequest
 */
export interface CreateDiaryRequest {
  /**
   * 체크한 적합 체크리스트 id 배열
   * @type {Array<Checklist>}
   * @memberof CreateDiaryRequest
   */
  checklist?: Array<Checklist>;
  /**
   * 일기 내용
   * @type {string}
   * @memberof CreateDiaryRequest
   */
  content?: string;
  /**
   * 일기 날짜
   * @type {string}
   * @memberof CreateDiaryRequest
   */
  date?: string;
  /**
   * 사용한 이모지
   * @type {string}
   * @memberof CreateDiaryRequest
   */
  emoji?: CreateDiaryRequestEmojiEnum;
  /**
   * 사용한 스티커 정보
   * @type {string}
   * @memberof CreateDiaryRequest
   */
  sticker?: string;
  /**
   * 태그 목록
   * @type {Array<string>}
   * @memberof CreateDiaryRequest
   */
  tags?: Array<string>;
}

export const CreateDiaryRequestEmojiEnum = {
  Angry: "ANGRY",
  Calm: "CALM",
  Displeased: "DISPLEASED",
  Happy: "HAPPY",
  Panic: "PANIC",
  Sad: "SAD",
} as const;

export type CreateDiaryRequestEmojiEnum =
  (typeof CreateDiaryRequestEmojiEnum)[keyof typeof CreateDiaryRequestEmojiEnum];

/**
 *
 * @export
 * @interface CreateDiaryResponse
 */
export interface CreateDiaryResponse {
  /**
   * 친구 적합도
   * @type {number}
   * @memberof CreateDiaryResponse
   */
  friendPercentage?: number;
  /**
   *
   * @type {DiarySaying}
   * @memberof CreateDiaryResponse
   */
  saying?: DiarySaying;
}
/**
 *
 * @export
 * @interface CreateMemberChecklistRequest
 */
export interface CreateMemberChecklistRequest {
  /**
   * 사용자 정의 기피하는 기준 리스트
   * @type {Array<string>}
   * @memberof CreateMemberChecklistRequest
   */
  badChecklist?: Array<string>;
  /**
   * 사용자 정의 이상적인 기준 리스트
   * @type {Array<string>}
   * @memberof CreateMemberChecklistRequest
   */
  goodChecklist?: Array<string>;
}
/**
 *
 * @export
 * @interface DataResponseBbokCharactersDto
 */
export interface DataResponseBbokCharactersDto {
  /**
   *
   * @type {BbokCharactersDto}
   * @memberof DataResponseBbokCharactersDto
   */
  data?: BbokCharactersDto;
  /**
   * 응답 메시지
   * @type {string}
   * @memberof DataResponseBbokCharactersDto
   */
  message?: string;
  /**
   * 응답 코드
   * @type {number}
   * @memberof DataResponseBbokCharactersDto
   */
  status?: number;
}
/**
 *
 * @export
 * @interface DataResponseCreateDiaryResponse
 */
export interface DataResponseCreateDiaryResponse {
  /**
   *
   * @type {CreateDiaryResponse}
   * @memberof DataResponseCreateDiaryResponse
   */
  data?: CreateDiaryResponse;
  /**
   * 응답 메시지
   * @type {string}
   * @memberof DataResponseCreateDiaryResponse
   */
  message?: string;
  /**
   * 응답 코드
   * @type {number}
   * @memberof DataResponseCreateDiaryResponse
   */
  status?: number;
}
/**
 *
 * @export
 * @interface DataResponseDiaryTagDto
 */
export interface DataResponseDiaryTagDto {
  /**
   *
   * @type {DiaryTagDto}
   * @memberof DataResponseDiaryTagDto
   */
  data?: DiaryTagDto;
  /**
   * 응답 메시지
   * @type {string}
   * @memberof DataResponseDiaryTagDto
   */
  message?: string;
  /**
   * 응답 코드
   * @type {number}
   * @memberof DataResponseDiaryTagDto
   */
  status?: number;
}
/**
 *
 * @export
 * @interface DataResponseFriendsDto
 */
export interface DataResponseFriendsDto {
  /**
   *
   * @type {FriendsDto}
   * @memberof DataResponseFriendsDto
   */
  data?: FriendsDto;
  /**
   * 응답 메시지
   * @type {string}
   * @memberof DataResponseFriendsDto
   */
  message?: string;
  /**
   * 응답 코드
   * @type {number}
   * @memberof DataResponseFriendsDto
   */
  status?: number;
}
/**
 *
 * @export
 * @interface DataResponseGetBasicChecklistResponse
 */
export interface DataResponseGetBasicChecklistResponse {
  /**
   *
   * @type {GetBasicChecklistResponse}
   * @memberof DataResponseGetBasicChecklistResponse
   */
  data?: GetBasicChecklistResponse;
  /**
   * 응답 메시지
   * @type {string}
   * @memberof DataResponseGetBasicChecklistResponse
   */
  message?: string;
  /**
   * 응답 코드
   * @type {number}
   * @memberof DataResponseGetBasicChecklistResponse
   */
  status?: number;
}
/**
 *
 * @export
 * @interface DataResponseGetDiariesResponse
 */
export interface DataResponseGetDiariesResponse {
  /**
   *
   * @type {GetDiariesResponse}
   * @memberof DataResponseGetDiariesResponse
   */
  data?: GetDiariesResponse;
  /**
   * 응답 메시지
   * @type {string}
   * @memberof DataResponseGetDiariesResponse
   */
  message?: string;
  /**
   * 응답 코드
   * @type {number}
   * @memberof DataResponseGetDiariesResponse
   */
  status?: number;
}
/**
 *
 * @export
 * @interface DataResponseGetMemberChecklistResponse
 */
export interface DataResponseGetMemberChecklistResponse {
  /**
   *
   * @type {GetMemberChecklistResponse}
   * @memberof DataResponseGetMemberChecklistResponse
   */
  data?: GetMemberChecklistResponse;
  /**
   * 응답 메시지
   * @type {string}
   * @memberof DataResponseGetMemberChecklistResponse
   */
  message?: string;
  /**
   * 응답 코드
   * @type {number}
   * @memberof DataResponseGetMemberChecklistResponse
   */
  status?: number;
}
/**
 *
 * @export
 * @interface DataResponseGetMemberInfoResponse
 */
export interface DataResponseGetMemberInfoResponse {
  /**
   *
   * @type {GetMemberInfoResponse}
   * @memberof DataResponseGetMemberInfoResponse
   */
  data?: GetMemberInfoResponse;
  /**
   * 응답 메시지
   * @type {string}
   * @memberof DataResponseGetMemberInfoResponse
   */
  message?: string;
  /**
   * 응답 코드
   * @type {number}
   * @memberof DataResponseGetMemberInfoResponse
   */
  status?: number;
}
/**
 *
 * @export
 * @interface DiaryChecklistDto
 */
export interface DiaryChecklistDto {
  /**
   *
   * @type {string}
   * @memberof DiaryChecklistDto
   */
  criteria?: string;
  /**
   *
   * @type {number}
   * @memberof DiaryChecklistDto
   */
  id?: number;
  /**
   *
   * @type {boolean}
   * @memberof DiaryChecklistDto
   */
  isChecked?: boolean;
}
/**
 *
 * @export
 * @interface DiarySaying
 */
export interface DiarySaying {
  /**
   * 명언 내용
   * @type {string}
   * @memberof DiarySaying
   */
  contents?: string;
  /**
   * 명언 Id
   * @type {number}
   * @memberof DiarySaying
   */
  id?: number;
  /**
   * 북마크 되어있는지 여부
   * @type {boolean}
   * @memberof DiarySaying
   */
  isMarked?: boolean;
  /**
   * 명언 출처
   * @type {string}
   * @memberof DiarySaying
   */
  reference?: string;
}
/**
 *
 * @export
 * @interface DiaryTagDto
 */
export interface DiaryTagDto {
  /**
   * 태그 목록
   * @type {Array<Tag>}
   * @memberof DiaryTagDto
   */
  tags?: Array<Tag>;
}
/**
 *
 * @export
 * @interface FriendDto
 */
export interface FriendDto {
  /**
   *
   * @type {boolean}
   * @memberof FriendDto
   */
  active?: boolean;
  /**
   * 친구 캐릭터 아이콘 url
   * @type {string}
   * @memberof FriendDto
   */
  characterUrl?: string;
  /**
   * 친구 관련 일화 수
   * @type {number}
   * @memberof FriendDto
   */
  countingDiary?: number;
  /**
   * 친구 고유 ID
   * @type {number}
   * @memberof FriendDto
   */
  id?: number;
  /**
   * 친구 이름
   * @type {string}
   * @memberof FriendDto
   */
  name?: string;
  /**
   * 친구 점수
   * @type {number}
   * @memberof FriendDto
   */
  score?: number;
  /**
   * 친구 생성 날짜
   * @type {string}
   * @memberof FriendDto
   */
  startedAt?: string;
}
/**
 *
 * @export
 * @interface FriendRequestDto
 */
export interface FriendRequestDto {
  /**
   * 친구 캐릭터
   * @type {string}
   * @memberof FriendRequestDto
   */
  character?: string;
  /**
   * 친구 이름
   * @type {string}
   * @memberof FriendRequestDto
   */
  name?: string;
}
/**
 *
 * @export
 * @interface FriendsDto
 */
export interface FriendsDto {
  /**
   * 친구 목록
   * @type {Array<FriendDto>}
   * @memberof FriendsDto
   */
  friends?: Array<FriendDto>;
}
/**
 *
 * @export
 * @interface GetBasicChecklistResponse
 */
export interface GetBasicChecklistResponse {
  /**
   * 기본 기피하는 체크리스트
   * @type {Array<string>}
   * @memberof GetBasicChecklistResponse
   */
  badChecklist?: Array<string>;
  /**
   * 기본 이상적인 체크리스트
   * @type {Array<string>}
   * @memberof GetBasicChecklistResponse
   */
  goodChecklist?: Array<string>;
}
/**
 *
 * @export
 * @interface GetDiariesResponse
 */
export interface GetDiariesResponse {
  /**
   * 일화 목록
   * @type {Array<GetDiaryResponse>}
   * @memberof GetDiariesResponse
   */
  diaries?: Array<GetDiaryResponse>;
  /**
   * 현재 페이지에 담긴 데이터 개수
   * @type {number}
   * @memberof GetDiariesResponse
   */
  numberOfElements?: number;
  /**
   * 시작 offset
   * @type {number}
   * @memberof GetDiariesResponse
   */
  offset?: number;
  /**
   * 페이지 당 담을 수 있는 최대 용량의 데이터 개수
   * @type {number}
   * @memberof GetDiariesResponse
   */
  pageNumber?: number;
  /**
   * 현재 페이지 번호 (0부터 시작)
   * @type {number}
   * @memberof GetDiariesResponse
   */
  pageSize?: number;
  /**
   * 전체 페이지의 개수 (필터링에 만족하는)
   * @type {number}
   * @memberof GetDiariesResponse
   */
  totalElements?: number;
  /**
   * 전체 요소 개수 (필터링에 만족하는)
   * @type {number}
   * @memberof GetDiariesResponse
   */
  totalPages?: number;
}
/**
 *
 * @export
 * @interface GetDiaryResponse
 */
export interface GetDiaryResponse {
  /**
   * 부적합 체크리스트
   * @type {Array<DiaryChecklistDto>}
   * @memberof GetDiaryResponse
   */
  badChecklist?: Array<DiaryChecklistDto>;
  /**
   * 일기 내용
   * @type {string}
   * @memberof GetDiaryResponse
   */
  content?: string;
  /**
   * 일기 작성 날짜
   * @type {string}
   * @memberof GetDiaryResponse
   */
  date?: string;
  /**
   * 일기에 사용한 이모지
   * @type {string}
   * @memberof GetDiaryResponse
   */
  emoji?: GetDiaryResponseEmojiEnum;
  /**
   * 이모지 다운로드 url
   * @type {string}
   * @memberof GetDiaryResponse
   */
  emojiUrl?: string;
  /**
   * 적합 체크리스트
   * @type {Array<DiaryChecklistDto>}
   * @memberof GetDiaryResponse
   */
  goodChecklist?: Array<DiaryChecklistDto>;
  /**
   * 일기 고유 ID
   * @type {number}
   * @memberof GetDiaryResponse
   */
  id?: number;
  /**
   * 스티커 JSON
   * @type {string}
   * @memberof GetDiaryResponse
   */
  sticker?: string;
  /**
   * 일기 태그 목록
   * @type {Array<string>}
   * @memberof GetDiaryResponse
   */
  tags?: Array<string>;
}

export const GetDiaryResponseEmojiEnum = {
  Angry: "ANGRY",
  Calm: "CALM",
  Displeased: "DISPLEASED",
  Happy: "HAPPY",
  Panic: "PANIC",
  Sad: "SAD",
} as const;

export type GetDiaryResponseEmojiEnum =
  (typeof GetDiaryResponseEmojiEnum)[keyof typeof GetDiaryResponseEmojiEnum];

/**
 *
 * @export
 * @interface GetMemberChecklistResponse
 */
export interface GetMemberChecklistResponse {
  /**
   * 이상적인 기준
   * @type {Array<ChecklistInfo>}
   * @memberof GetMemberChecklistResponse
   */
  badChecklist?: Array<ChecklistInfo>;
  /**
   * 기피하는 기준
   * @type {Array<ChecklistInfo>}
   * @memberof GetMemberChecklistResponse
   */
  goodChecklist?: Array<ChecklistInfo>;
}
/**
 *
 * @export
 * @interface GetMemberInfoResponse
 */
export interface GetMemberInfoResponse {
  /**
   * member의 고유 Id
   * @type {string}
   * @memberof GetMemberInfoResponse
   */
  memberId?: string;
  /**
   * member의 이름
   * @type {string}
   * @memberof GetMemberInfoResponse
   */
  memberName?: string;
  /**
   *
   * @type {string}
   * @memberof GetMemberInfoResponse
   */
  oauth2Provider?: GetMemberInfoResponseOauth2ProviderEnum;
  /**
   * member의 프로필 이미지 url
   * @type {string}
   * @memberof GetMemberInfoResponse
   */
  profileUrl?: string;
}

export const GetMemberInfoResponseOauth2ProviderEnum = {
  Guest: "GUEST",
  Kakao: "KAKAO",
} as const;

export type GetMemberInfoResponseOauth2ProviderEnum =
  (typeof GetMemberInfoResponseOauth2ProviderEnum)[keyof typeof GetMemberInfoResponseOauth2ProviderEnum];

/**
 *
 * @export
 * @interface MessageResponse
 */
export interface MessageResponse {
  /**
   * 응답 메시지
   * @type {string}
   * @memberof MessageResponse
   */
  message?: string;
  /**
   * 응답 코드
   * @type {number}
   * @memberof MessageResponse
   */
  status?: number;
}
/**
 *
 * @export
 * @interface Tag
 */
export interface Tag {
  /**
   * 태그 id
   * @type {number}
   * @memberof Tag
   */
  id?: number;
  /**
   * 태그 이름
   * @type {string}
   * @memberof Tag
   */
  tag?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary 사용자 정의 체크리스트 추가
     * @param {CreateMemberChecklistRequest} [createMemberChecklistRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChecklistUsingPOST: async (
      createMemberChecklistRequest?: CreateMemberChecklistRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/checklist`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createMemberChecklistRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 일기 등록
     * @param {number} id 친구 id
     * @param {CreateDiaryRequest} [createDiaryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDiaryUsingPOST: async (
      id: number,
      createDiaryRequest?: CreateDiaryRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("createDiaryUsingPOST", "id", id);
      const localVarPath = `/api/v1/friend/{id}/diary`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createDiaryRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 친구 등록
     * @param {FriendRequestDto} [friendRequestDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFriendUsingPOST: async (
      friendRequestDto?: FriendRequestDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/friend`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        friendRequestDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 기본 체크리스트 제공
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBasicChecklistUsingGET: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/checklist`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 캐릭터 정보 제공
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBbokCharacterUsingGET: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/character`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 나만의 기준 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChecklistUsingGET: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/friend/checklist`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 일기 목록 조회
     * @param {number} id 친구 id
     * @param {number} [offset] 목록 오프셋
     * @param {string} [order] 시간 정렬 기준
     * @param {string} [q] 검색어
     * @param {string} [tag] 태그
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDiariesUsingGET: async (
      id: number,
      offset?: number,
      order?: string,
      q?: string,
      tag?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getDiariesUsingGET", "id", id);
      const localVarPath = `/api/v1/friend/{id}/diary`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration
      );

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (q !== undefined) {
        localVarQueryParameter["q"] = q;
      }

      if (tag !== undefined) {
        localVarQueryParameter["tag"] = tag;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 친구 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFriendsUsingGET: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/friend`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 마이 페이지에서 사용자의 정보를 볼 수 있습니다.
     * @summary 내 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMemberUsingGET: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/member`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 태그 목록 조회
     * @param {number} id 친구 id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTagsUsingGET: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getTagsUsingGET", "id", id);
      const localVarPath = `/api/v1/friend/{id}/diary/tag`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 사용자 정의 체크리스트 추가
     * @param {CreateMemberChecklistRequest} [createMemberChecklistRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createChecklistUsingPOST(
      createMemberChecklistRequest?: CreateMemberChecklistRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<MessageResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createChecklistUsingPOST(
          createMemberChecklistRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary 일기 등록
     * @param {number} id 친구 id
     * @param {CreateDiaryRequest} [createDiaryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createDiaryUsingPOST(
      id: number,
      createDiaryRequest?: CreateDiaryRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DataResponseCreateDiaryResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createDiaryUsingPOST(
          id,
          createDiaryRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary 친구 등록
     * @param {FriendRequestDto} [friendRequestDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createFriendUsingPOST(
      friendRequestDto?: FriendRequestDto,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<MessageResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createFriendUsingPOST(
          friendRequestDto,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary 기본 체크리스트 제공
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBasicChecklistUsingGET(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DataResponseGetBasicChecklistResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getBasicChecklistUsingGET(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary 캐릭터 정보 제공
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBbokCharacterUsingGET(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DataResponseBbokCharactersDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getBbokCharacterUsingGET(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary 나만의 기준 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getChecklistUsingGET(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DataResponseGetMemberChecklistResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getChecklistUsingGET(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary 일기 목록 조회
     * @param {number} id 친구 id
     * @param {number} [offset] 목록 오프셋
     * @param {string} [order] 시간 정렬 기준
     * @param {string} [q] 검색어
     * @param {string} [tag] 태그
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDiariesUsingGET(
      id: number,
      offset?: number,
      order?: string,
      q?: string,
      tag?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DataResponseGetDiariesResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getDiariesUsingGET(
          id,
          offset,
          order,
          q,
          tag,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary 친구 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFriendsUsingGET(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DataResponseFriendsDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getFriendsUsingGET(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 마이 페이지에서 사용자의 정보를 볼 수 있습니다.
     * @summary 내 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMemberUsingGET(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DataResponseGetMemberInfoResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMemberUsingGET(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary 태그 목록 조회
     * @param {number} id 친구 id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTagsUsingGET(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DataResponseDiaryTagDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTagsUsingGET(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @summary 사용자 정의 체크리스트 추가
     * @param {CreateMemberChecklistRequest} [createMemberChecklistRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChecklistUsingPOST(
      createMemberChecklistRequest?: CreateMemberChecklistRequest,
      options?: any
    ): AxiosPromise<MessageResponse> {
      return localVarFp
        .createChecklistUsingPOST(createMemberChecklistRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 일기 등록
     * @param {number} id 친구 id
     * @param {CreateDiaryRequest} [createDiaryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDiaryUsingPOST(
      id: number,
      createDiaryRequest?: CreateDiaryRequest,
      options?: any
    ): AxiosPromise<DataResponseCreateDiaryResponse> {
      return localVarFp
        .createDiaryUsingPOST(id, createDiaryRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 친구 등록
     * @param {FriendRequestDto} [friendRequestDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFriendUsingPOST(
      friendRequestDto?: FriendRequestDto,
      options?: any
    ): AxiosPromise<MessageResponse> {
      return localVarFp
        .createFriendUsingPOST(friendRequestDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 기본 체크리스트 제공
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBasicChecklistUsingGET(
      options?: any
    ): AxiosPromise<DataResponseGetBasicChecklistResponse> {
      return localVarFp
        .getBasicChecklistUsingGET(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 캐릭터 정보 제공
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBbokCharacterUsingGET(
      options?: any
    ): AxiosPromise<DataResponseBbokCharactersDto> {
      return localVarFp
        .getBbokCharacterUsingGET(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 나만의 기준 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChecklistUsingGET(
      options?: any
    ): AxiosPromise<DataResponseGetMemberChecklistResponse> {
      return localVarFp
        .getChecklistUsingGET(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 일기 목록 조회
     * @param {number} id 친구 id
     * @param {number} [offset] 목록 오프셋
     * @param {string} [order] 시간 정렬 기준
     * @param {string} [q] 검색어
     * @param {string} [tag] 태그
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDiariesUsingGET(
      id: number,
      offset?: number,
      order?: string,
      q?: string,
      tag?: string,
      options?: any
    ): AxiosPromise<DataResponseGetDiariesResponse> {
      return localVarFp
        .getDiariesUsingGET(id, offset, order, q, tag, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 친구 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFriendsUsingGET(options?: any): AxiosPromise<DataResponseFriendsDto> {
      return localVarFp
        .getFriendsUsingGET(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 마이 페이지에서 사용자의 정보를 볼 수 있습니다.
     * @summary 내 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMemberUsingGET(
      options?: any
    ): AxiosPromise<DataResponseGetMemberInfoResponse> {
      return localVarFp
        .getMemberUsingGET(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 태그 목록 조회
     * @param {number} id 친구 id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTagsUsingGET(
      id: number,
      options?: any
    ): AxiosPromise<DataResponseDiaryTagDto> {
      return localVarFp
        .getTagsUsingGET(id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @summary 사용자 정의 체크리스트 추가
   * @param {CreateMemberChecklistRequest} [createMemberChecklistRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createChecklistUsingPOST(
    createMemberChecklistRequest?: CreateMemberChecklistRequest,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .createChecklistUsingPOST(createMemberChecklistRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 일기 등록
   * @param {number} id 친구 id
   * @param {CreateDiaryRequest} [createDiaryRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createDiaryUsingPOST(
    id: number,
    createDiaryRequest?: CreateDiaryRequest,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .createDiaryUsingPOST(id, createDiaryRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 친구 등록
   * @param {FriendRequestDto} [friendRequestDto]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createFriendUsingPOST(
    friendRequestDto?: FriendRequestDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .createFriendUsingPOST(friendRequestDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 기본 체크리스트 제공
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getBasicChecklistUsingGET(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getBasicChecklistUsingGET(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 캐릭터 정보 제공
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getBbokCharacterUsingGET(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getBbokCharacterUsingGET(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 나만의 기준 조회
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getChecklistUsingGET(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getChecklistUsingGET(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 일기 목록 조회
   * @param {number} id 친구 id
   * @param {number} [offset] 목록 오프셋
   * @param {string} [order] 시간 정렬 기준
   * @param {string} [q] 검색어
   * @param {string} [tag] 태그
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getDiariesUsingGET(
    id: number,
    offset?: number,
    order?: string,
    q?: string,
    tag?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getDiariesUsingGET(id, offset, order, q, tag, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 친구 목록 조회
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getFriendsUsingGET(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getFriendsUsingGET(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 마이 페이지에서 사용자의 정보를 볼 수 있습니다.
   * @summary 내 정보 조회
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getMemberUsingGET(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getMemberUsingGET(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 태그 목록 조회
   * @param {number} id 친구 id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getTagsUsingGET(id: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getTagsUsingGET(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
