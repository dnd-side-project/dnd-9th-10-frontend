/* tslint:disable */
/* eslint-disable */
/**
 * BBOK Swagger API
 * DND 9th 10조의 Swagger docs 입니다.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BookmarkInfoDto
 */
export interface BookmarkInfoDto {
    /**
     * 북마크한 글귀 리스트
     * @type {Array<SayingInfoDto>}
     * @memberof BookmarkInfoDto
     */
    'bookmarks'?: Array<SayingInfoDto>;
}
/**
 * 
 * @export
 * @interface BookmarkRequestDto
 */
export interface BookmarkRequestDto {
    /**
     * 북마크하는 명언 Id
     * @type {number}
     * @memberof BookmarkRequestDto
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface ChecklistInfoRequestDto
 */
export interface ChecklistInfoRequestDto {
    /**
     * 수정된 기준
     * @type {string}
     * @memberof ChecklistInfoRequestDto
     */
    'criteria'?: string;
    /**
     * 수정하려는 기준 Id
     * @type {number}
     * @memberof ChecklistInfoRequestDto
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface DataResponseBookmarkInfoDto
 */
export interface DataResponseBookmarkInfoDto {
    /**
     * 
     * @type {BookmarkInfoDto}
     * @memberof DataResponseBookmarkInfoDto
     */
    'data'?: BookmarkInfoDto;
    /**
     * 응답 메시지
     * @type {string}
     * @memberof DataResponseBookmarkInfoDto
     */
    'message'?: string;
    /**
     * 응답 코드
     * @type {number}
     * @memberof DataResponseBookmarkInfoDto
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface DataResponseDiaryDto
 */
export interface DataResponseDiaryDto {
    /**
     * 
     * @type {DiaryDto}
     * @memberof DataResponseDiaryDto
     */
    'data'?: DiaryDto;
    /**
     * 응답 메시지
     * @type {string}
     * @memberof DataResponseDiaryDto
     */
    'message'?: string;
    /**
     * 응답 코드
     * @type {number}
     * @memberof DataResponseDiaryDto
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface DataResponseDiaryStickerDto
 */
export interface DataResponseDiaryStickerDto {
    /**
     * 
     * @type {DiaryStickerDto}
     * @memberof DataResponseDiaryStickerDto
     */
    'data'?: DiaryStickerDto;
    /**
     * 응답 메시지
     * @type {string}
     * @memberof DataResponseDiaryStickerDto
     */
    'message'?: string;
    /**
     * 응답 코드
     * @type {number}
     * @memberof DataResponseDiaryStickerDto
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface DiaryChecklistDto
 */
export interface DiaryChecklistDto {
    /**
     * 
     * @type {string}
     * @memberof DiaryChecklistDto
     */
    'criteria'?: string;
    /**
     * 
     * @type {number}
     * @memberof DiaryChecklistDto
     */
    'id'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DiaryChecklistDto
     */
    'isChecked'?: boolean;
}
/**
 * 
 * @export
 * @interface DiaryCreateDto
 */
export interface DiaryCreateDto {
    /**
     * 친구 적합도
     * @type {number}
     * @memberof DiaryCreateDto
     */
    'friendPercentage'?: number;
    /**
     * 
     * @type {DiarySayingDto}
     * @memberof DiaryCreateDto
     */
    'saying'?: DiarySayingDto;
}
/**
 * 
 * @export
 * @interface DiaryDto
 */
export interface DiaryDto {
    /**
     * 부적합 체크리스트
     * @type {Array<DiaryChecklistDto>}
     * @memberof DiaryDto
     */
    'badChecklist'?: Array<DiaryChecklistDto>;
    /**
     * 일기 내용
     * @type {string}
     * @memberof DiaryDto
     */
    'content'?: string;
    /**
     * 일기 작성 날짜
     * @type {string}
     * @memberof DiaryDto
     */
    'date'?: string;
    /**
     * 일기에 사용한 이모지
     * @type {string}
     * @memberof DiaryDto
     */
    'emoji'?: DiaryDtoEmojiEnum;
    /**
     * 이모지 다운로드 url
     * @type {string}
     * @memberof DiaryDto
     */
    'emojiUrl'?: string;
    /**
     * 적합 체크리스트
     * @type {Array<DiaryChecklistDto>}
     * @memberof DiaryDto
     */
    'goodChecklist'?: Array<DiaryChecklistDto>;
    /**
     * 일기 고유 ID
     * @type {number}
     * @memberof DiaryDto
     */
    'id'?: number;
    /**
     * 스티커 JSON
     * @type {string}
     * @memberof DiaryDto
     */
    'sticker'?: string;
    /**
     * 일기 태그 목록
     * @type {Array<string>}
     * @memberof DiaryDto
     */
    'tags'?: Array<string>;
}

export const DiaryDtoEmojiEnum = {
    Angry: 'ANGRY',
    Calm: 'CALM',
    Displeased: 'DISPLEASED',
    Happy: 'HAPPY',
    Panic: 'PANIC',
    Sad: 'SAD'
} as const;

export type DiaryDtoEmojiEnum = typeof DiaryDtoEmojiEnum[keyof typeof DiaryDtoEmojiEnum];

/**
 * 
 * @export
 * @interface DiarySayingDto
 */
export interface DiarySayingDto {
    /**
     * 명언 내용
     * @type {string}
     * @memberof DiarySayingDto
     */
    'contents'?: string;
    /**
     * 명언 Id
     * @type {number}
     * @memberof DiarySayingDto
     */
    'id'?: number;
    /**
     * 북마크 되어있는지 여부
     * @type {boolean}
     * @memberof DiarySayingDto
     */
    'isMarked'?: boolean;
    /**
     * 명언 출처
     * @type {string}
     * @memberof DiarySayingDto
     */
    'reference'?: string;
}
/**
 * 
 * @export
 * @interface DiaryStickerDto
 */
export interface DiaryStickerDto {
    /**
     * 
     * @type {Array<StickerDto>}
     * @memberof DiaryStickerDto
     */
    'stickers'?: Array<StickerDto>;
}
/**
 * 
 * @export
 * @interface MessageResponse
 */
export interface MessageResponse {
    /**
     * 응답 메시지
     * @type {string}
     * @memberof MessageResponse
     */
    'message'?: string;
    /**
     * 응답 코드
     * @type {number}
     * @memberof MessageResponse
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface SayingInfoDto
 */
export interface SayingInfoDto {
    /**
     * 명언 내용
     * @type {string}
     * @memberof SayingInfoDto
     */
    'contents'?: string;
    /**
     * 명언 Id
     * @type {number}
     * @memberof SayingInfoDto
     */
    'id'?: number;
    /**
     * 명언 출처
     * @type {string}
     * @memberof SayingInfoDto
     */
    'reference'?: string;
}
/**
 * 
 * @export
 * @interface StickerDto
 */
export interface StickerDto {
    /**
     * 스티커 이름
     * @type {string}
     * @memberof StickerDto
     */
    'name'?: StickerDtoNameEnum;
    /**
     * 스티커 다운로드 주소
     * @type {string}
     * @memberof StickerDto
     */
    'stickerUrl'?: string;
}

export const StickerDtoNameEnum = {
    Aeng: 'AENG',
    Band: 'BAND',
    Heart: 'HEART',
    Kk: 'KK',
    Poop: 'POOP',
    Rainbow: 'RAINBOW',
    Star: 'STAR',
    Sweetpotato: 'SWEETPOTATO'
} as const;

export type StickerDtoNameEnum = typeof StickerDtoNameEnum[keyof typeof StickerDtoNameEnum];


/**
 * MockApi - axios parameter creator
 * @export
 */
export const MockApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 북마크 추가
         * @param {BookmarkRequestDto} [bookmarkRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBookmarkUsingPOST: async (bookmarkRequestDto?: BookmarkRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/bookmark`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookmarkRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 북마크 삭제
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBookmarkUsingDELETE: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBookmarkUsingDELETE', 'id', id)
            const localVarPath = `/api/v1/bookmark/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 일기 삭제
         * @param {number} id 일기 id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDiaryUsingDELETE: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDiaryUsingDELETE', 'id', id)
            const localVarPath = `/api/v1/friend/diary/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 북마크 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookmarksUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/bookmark`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 일기 상세 조회
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiaryUsingGET: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDiaryUsingGET', 'id', id)
            const localVarPath = `/api/v1/friend/diary/detail/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 스티커 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStickersUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/friend/diary/sticker`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 나만의 기준 수정
         * @param {ChecklistInfoRequestDto} [checklistInfoRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChecklistUsingPATCH: async (checklistInfoRequestDto?: ChecklistInfoRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/friend/checklist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checklistInfoRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 일기 수정
         * @param {number} id 일기 id
         * @param {DiaryCreateDto} [diaryCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDiaryUsingPATCH: async (id: number, diaryCreateDto?: DiaryCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateDiaryUsingPATCH', 'id', id)
            const localVarPath = `/api/v1/friend/diary/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(diaryCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MockApi - functional programming interface
 * @export
 */
export const MockApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MockApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 북마크 추가
         * @param {BookmarkRequestDto} [bookmarkRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBookmarkUsingPOST(bookmarkRequestDto?: BookmarkRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBookmarkUsingPOST(bookmarkRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 북마크 삭제
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBookmarkUsingDELETE(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBookmarkUsingDELETE(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 일기 삭제
         * @param {number} id 일기 id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDiaryUsingDELETE(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDiaryUsingDELETE(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 북마크 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBookmarksUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataResponseBookmarkInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBookmarksUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 일기 상세 조회
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDiaryUsingGET(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataResponseDiaryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDiaryUsingGET(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 스티커 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStickersUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataResponseDiaryStickerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStickersUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 나만의 기준 수정
         * @param {ChecklistInfoRequestDto} [checklistInfoRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateChecklistUsingPATCH(checklistInfoRequestDto?: ChecklistInfoRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateChecklistUsingPATCH(checklistInfoRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 일기 수정
         * @param {number} id 일기 id
         * @param {DiaryCreateDto} [diaryCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDiaryUsingPATCH(id: number, diaryCreateDto?: DiaryCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDiaryUsingPATCH(id, diaryCreateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MockApi - factory interface
 * @export
 */
export const MockApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MockApiFp(configuration)
    return {
        /**
         * 
         * @summary 북마크 추가
         * @param {BookmarkRequestDto} [bookmarkRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBookmarkUsingPOST(bookmarkRequestDto?: BookmarkRequestDto, options?: any): AxiosPromise<MessageResponse> {
            return localVarFp.createBookmarkUsingPOST(bookmarkRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 북마크 삭제
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBookmarkUsingDELETE(id: number, options?: any): AxiosPromise<MessageResponse> {
            return localVarFp.deleteBookmarkUsingDELETE(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 일기 삭제
         * @param {number} id 일기 id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDiaryUsingDELETE(id: number, options?: any): AxiosPromise<MessageResponse> {
            return localVarFp.deleteDiaryUsingDELETE(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 북마크 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookmarksUsingGET(options?: any): AxiosPromise<DataResponseBookmarkInfoDto> {
            return localVarFp.getBookmarksUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 일기 상세 조회
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiaryUsingGET(id: number, options?: any): AxiosPromise<DataResponseDiaryDto> {
            return localVarFp.getDiaryUsingGET(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 스티커 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStickersUsingGET(options?: any): AxiosPromise<DataResponseDiaryStickerDto> {
            return localVarFp.getStickersUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 나만의 기준 수정
         * @param {ChecklistInfoRequestDto} [checklistInfoRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChecklistUsingPATCH(checklistInfoRequestDto?: ChecklistInfoRequestDto, options?: any): AxiosPromise<MessageResponse> {
            return localVarFp.updateChecklistUsingPATCH(checklistInfoRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 일기 수정
         * @param {number} id 일기 id
         * @param {DiaryCreateDto} [diaryCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDiaryUsingPATCH(id: number, diaryCreateDto?: DiaryCreateDto, options?: any): AxiosPromise<MessageResponse> {
            return localVarFp.updateDiaryUsingPATCH(id, diaryCreateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MockApi - object-oriented interface
 * @export
 * @class MockApi
 * @extends {BaseAPI}
 */
export class MockApi extends BaseAPI {
    /**
     * 
     * @summary 북마크 추가
     * @param {BookmarkRequestDto} [bookmarkRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MockApi
     */
    public createBookmarkUsingPOST(bookmarkRequestDto?: BookmarkRequestDto, options?: AxiosRequestConfig) {
        return MockApiFp(this.configuration).createBookmarkUsingPOST(bookmarkRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 북마크 삭제
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MockApi
     */
    public deleteBookmarkUsingDELETE(id: number, options?: AxiosRequestConfig) {
        return MockApiFp(this.configuration).deleteBookmarkUsingDELETE(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 일기 삭제
     * @param {number} id 일기 id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MockApi
     */
    public deleteDiaryUsingDELETE(id: number, options?: AxiosRequestConfig) {
        return MockApiFp(this.configuration).deleteDiaryUsingDELETE(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 북마크 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MockApi
     */
    public getBookmarksUsingGET(options?: AxiosRequestConfig) {
        return MockApiFp(this.configuration).getBookmarksUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 일기 상세 조회
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MockApi
     */
    public getDiaryUsingGET(id: number, options?: AxiosRequestConfig) {
        return MockApiFp(this.configuration).getDiaryUsingGET(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 스티커 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MockApi
     */
    public getStickersUsingGET(options?: AxiosRequestConfig) {
        return MockApiFp(this.configuration).getStickersUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 나만의 기준 수정
     * @param {ChecklistInfoRequestDto} [checklistInfoRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MockApi
     */
    public updateChecklistUsingPATCH(checklistInfoRequestDto?: ChecklistInfoRequestDto, options?: AxiosRequestConfig) {
        return MockApiFp(this.configuration).updateChecklistUsingPATCH(checklistInfoRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 일기 수정
     * @param {number} id 일기 id
     * @param {DiaryCreateDto} [diaryCreateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MockApi
     */
    public updateDiaryUsingPATCH(id: number, diaryCreateDto?: DiaryCreateDto, options?: AxiosRequestConfig) {
        return MockApiFp(this.configuration).updateDiaryUsingPATCH(id, diaryCreateDto, options).then((request) => request(this.axios, this.basePath));
    }
}


