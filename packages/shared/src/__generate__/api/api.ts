/* tslint:disable */
/* eslint-disable */
/**
 * BBOK Swagger API
 * DND 9th 10조의 Swagger docs 입니다.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ChecklistInfoRequest
 */
export interface ChecklistInfoRequest {
    /**
     * 
     * @type {string}
     * @memberof ChecklistInfoRequest
     */
    'criteria'?: string;
    /**
     * 
     * @type {number}
     * @memberof ChecklistInfoRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface EditMemberChecklistRequest
 */
export interface EditMemberChecklistRequest {
    /**
     * 
     * @type {Array<ChecklistInfoRequest>}
     * @memberof EditMemberChecklistRequest
     */
    'badChecklist'?: Array<ChecklistInfoRequest>;
    /**
     * 
     * @type {Array<ChecklistInfoRequest>}
     * @memberof EditMemberChecklistRequest
     */
    'goodChecklist'?: Array<ChecklistInfoRequest>;
}
/**
 * 
 * @export
 * @interface MessageResponse
 */
export interface MessageResponse {
    /**
     * 응답 메시지
     * @type {string}
     * @memberof MessageResponse
     */
    'message'?: string;
    /**
     * 응답 코드
     * @type {number}
     * @memberof MessageResponse
     */
    'status'?: number;
}

/**
 * MockApi - axios parameter creator
 * @export
 */
export const MockApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 나만의 기준 수정
         * @param {EditMemberChecklistRequest} [editMemberChecklistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChecklistUsingPATCH: async (editMemberChecklistRequest?: EditMemberChecklistRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/friend/checklist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editMemberChecklistRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MockApi - functional programming interface
 * @export
 */
export const MockApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MockApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 나만의 기준 수정
         * @param {EditMemberChecklistRequest} [editMemberChecklistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateChecklistUsingPATCH(editMemberChecklistRequest?: EditMemberChecklistRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateChecklistUsingPATCH(editMemberChecklistRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MockApi - factory interface
 * @export
 */
export const MockApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MockApiFp(configuration)
    return {
        /**
         * 
         * @summary 나만의 기준 수정
         * @param {EditMemberChecklistRequest} [editMemberChecklistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChecklistUsingPATCH(editMemberChecklistRequest?: EditMemberChecklistRequest, options?: any): AxiosPromise<MessageResponse> {
            return localVarFp.updateChecklistUsingPATCH(editMemberChecklistRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MockApi - object-oriented interface
 * @export
 * @class MockApi
 * @extends {BaseAPI}
 */
export class MockApi extends BaseAPI {
    /**
     * 
     * @summary 나만의 기준 수정
     * @param {EditMemberChecklistRequest} [editMemberChecklistRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MockApi
     */
    public updateChecklistUsingPATCH(editMemberChecklistRequest?: EditMemberChecklistRequest, options?: AxiosRequestConfig) {
        return MockApiFp(this.configuration).updateChecklistUsingPATCH(editMemberChecklistRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


